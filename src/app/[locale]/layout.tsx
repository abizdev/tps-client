import type { Metadata } from 'next';
import { Rubik, Inter } from 'next/font/google';
import { hasLocale, NextIntlClientProvider } from 'next-intl';
import { notFound } from 'next/navigation';
import localFont from 'next/font/local';
import { cn } from '@shared/lib/utils';
import { routing } from '@shared/config/i18n';
import { Header } from '@widgets/header';
import { Footer } from '@widgets/footer';

import '@shared/assets/css/globals.css';
import '@shared/assets/fonts/icons/style.css';

const rubik = Rubik({
	subsets: ['latin'],
	weight: ['400', '500', '700'],
	style: ['normal'],
	variable: '--font-rubik',
	display: 'swap',
});
const inter = Inter({
	subsets: ['latin'],
	weight: ['400', '500', '700'],
	style: ['normal'],
	variable: '--font-inter',
	display: 'swap',
});

const proxima = localFont({
	src: [
		{
			path: '../../shared/assets/fonts/proximanova/ProximaNova-Regular.woff2',
			weight: '400',
		},
		{
			path: '../../shared/assets/fonts/proximanova/ProximaNova-Medium.woff2',
			weight: '500',
		},
		{
			path: '../../shared/assets/fonts/proximanova/ProximaNova-Semibold.woff2',
			weight: '600',
		},
		{
			path: '../../shared/assets/fonts/proximanova/ProximaNova-Bold.woff2',
			weight: '700',
		},
	],
	variable: '--font-proxima',
	display: 'swap',
});
const sf = localFont({
	src: [
		{
			path: '../../shared/assets/fonts/sfpro/SFProText-Regular.woff2',
			weight: '400',
		},
		{
			path: '../../shared/assets/fonts/sfpro/SFProText-Semibold.woff2',
			weight: '600',
		},
		{
			path: '../../shared/assets/fonts/sfpro/SFProText-Bold.woff2',
			weight: '700',
		},
	],
	variable: '--font-sf',
	display: 'swap',
});


export const metadata: Metadata = {
	title: 'Create Next App',
	description: 'Generated by create next app',
};

export default async function RootLayout({
	children,
	params
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{locale: string}>;
}>) {
	// Ensure that the incoming `locale` is valid
	const { locale } = await params;

	if (!hasLocale(routing.locales, locale)) {
		notFound();
	}

	return (
		<html lang="en">
			<body
				className={cn(
					'antialiased',
					rubik.variable,
					inter.variable,
					proxima.variable,
					sf.variable
				)}
			>
				<NextIntlClientProvider>
					<Header />
					{children}
					<Footer />
				</NextIntlClientProvider>
			</body>
		</html>
	);
}
